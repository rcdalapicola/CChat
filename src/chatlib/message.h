#ifndef MESSAGE_H
#define MESSAGE_H

constexpr int MESSAGE_USER_BUFFER_SIZE = 64;
constexpr int MESSAGE_CONTENT_BUFFER_SIZE = 512 - MESSAGE_USER_BUFFER_SIZE;
constexpr int MESSAGE_TOTAL_BUFFER_SIZE = MESSAGE_USER_BUFFER_SIZE + MESSAGE_CONTENT_BUFFER_SIZE;

class Message {
public:
    /**
     * @brief Construct a new Message object
     * 
     */
    Message();
    /**
     * @brief Construct a new Message object, filling the "user" and "content" field with the 
     * data inside the serialized Message.
     * 
     * @param serializedMessage a char pointer generated by a serializeMessage() function.
     */
    Message(const char* serializedMessage);

    /**
     * @brief Converts the message to char*, to be sent by a socket.
     * 
     * @return const char* serialized version o the message.
     */
    const char* serializeMessage() const; 
    /**
     * @brief Converts a serialized Message back into a Message object
     * 
     */
    void deserializeMessage(const char*);

    /**
     * @brief Sets the author of the message.
     * 
     * @param user author of the massage
     */
    void user(const char* user);
    /**
     * @brief Get the author of the message
     * 
     * @return const char* author of the message
     */
    const char* getUser() const;

    /**
     * @brief Sets the body of the message.
     * 
     * @param content body of the message.
     */
    void content(const char* content);
    /**
     * @brief Gets the body of the message.
     * 
     * @return const char* body of the message.
     */
    const char* getContent() const;

private:
    char mUser[MESSAGE_USER_BUFFER_SIZE];
    char mContent[MESSAGE_CONTENT_BUFFER_SIZE];
};

#endif //MESSAGE_H
